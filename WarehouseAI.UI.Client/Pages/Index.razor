@page "/{sessionId?}"

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject CustomHttpClient CustomHttpClient

<div class="container mt-3">
    <div class="sticky-query p-3">
        <div class="d-flex">
            <button class="btn btn-primary me-2" @onclick="CreateNewSession">New Session</button>
            <select class="form-select w-auto me-2" @onchange="HandleSessionChange">
                <option value="" selected="@(string.IsNullOrEmpty(sessionId))">Select a session...</option>
                @foreach (var id in SessionIds)
                {
                    <option value="@id" selected="@(id == sessionId)">@id</option>
                }
            </select>
            @if (!string.IsNullOrEmpty(sessionId))
            {
                <button class="btn btn-danger" @onclick="ConfirmAndDeleteSession">Delete Session</button>
            }
        </div>

        @if (!string.IsNullOrEmpty(sessionId))
        {
            <div class="input-group mt-2">
                <input class="form-control" @bind="UserInput" @bind:event="oninput" @onkeyup="HandleKeyPress" placeholder="Enter your query..." />
                <button class="btn btn-primary" @onclick="SendMessage" disabled="@IsLoading">
                    Send
                </button>
                @if (IsLoading)
                {
                    <div class="spinner-border text-primary ms-2" role="status" style="width: 1.5rem; height: 1.5rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>
        }
    </div>

    <div class="chat-history mt-3" id="chatHistory">
        @if (!string.IsNullOrEmpty(sessionId))
        {
            @foreach (var entry in ChatHistory)
            {
                <div class="mb-3">
                    <div class="text-end me-3">
                        <div class="badge bg-secondary">User</div>
                        <pre class="alert alert-primary d-inline-block p-2">@entry.User</pre>
                        <br />
                        <small class="d-block text-end">@entry.UserTimestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</small>
                    </div>

                    @if (!string.IsNullOrEmpty(entry.Assistant))
                    {
                        <div>
                            <div class="badge bg-success">Assistant</div>
                            <pre class="alert alert-light border d-inline-block p-2">@entry.Assistant</pre>
                            <br />
                            <small class="d-block">@entry.AssistantTimestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</small>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public string sessionId { get; set; }

    private List<string> SessionIds = new();
    private bool IsLoading = false;
    private string UserInput = "";
    private List<ChatData> ChatHistory = new();

    // ---------------------- LIFECYCLE METHODS ----------------------

    protected override async Task OnInitializedAsync()
    {
        await LoadSessionIdsAsync();
        if (!string.IsNullOrEmpty(sessionId))
        {
            await LoadSessionByIdAsync(sessionId);
        }
    }

    protected override void OnAfterRender(bool firstRender) => ScrollToBottom();

    // ---------------------- SESSION MANAGEMENT ----------------------

    private async Task HandleSessionChange(ChangeEventArgs e)
    {
        var newSessionId = e.Value?.ToString();
        if (newSessionId != sessionId)
        {
            if (!string.IsNullOrEmpty(newSessionId))
            {
                await LoadSessionByIdAsync(newSessionId); // Load new session
            }
            else
            {
                ChatHistory.Clear(); // Clear when switching to "Select a session..."
            }

            NavigationManager.NavigateTo(string.IsNullOrEmpty(newSessionId) ? "/" : $"/{newSessionId}");
        }
    }

    private async Task LoadSessionIdsAsync()
    {
        SessionIds = (await CustomHttpClient.Get<SessionIdsResponse>("/sessions")).SessionIds;
    }

    private async Task LoadSessionByIdAsync(string sessionId)
    {
        if (!string.IsNullOrEmpty(sessionId))
        {
            ChatHistory = (await CustomHttpClient.Get<ChatHistoryResponse>($"/sessions/{sessionId}/history")).History;
        }
    }

    private async Task CreateNewSession()
    {
        var sessionIdResponse = await CustomHttpClient.Post<SessionIdResponse>("/sessions");
        SessionIds.Add(sessionIdResponse.SessionId);
        await LoadSessionByIdAsync(sessionIdResponse.SessionId); // Load new session
        NavigationManager.NavigateTo($"/{sessionIdResponse.SessionId}");
    }

    private async Task ConfirmAndDeleteSession()
    {
        if (!string.IsNullOrEmpty(sessionId))
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this session?");
            if (confirmed)
            {
                await CustomHttpClient.Post<object>($"/sessions/{sessionId}");
                SessionIds.Remove(sessionId);
                ChatHistory.Clear();
                UserInput = "";
                NavigationManager.NavigateTo("/");
            }
        }
    }

    // ---------------------- CHAT MANAGEMENT ----------------------

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserInput) || string.IsNullOrEmpty(sessionId))
        {
            return;
        }

        IsLoading = true;

        var chatEntry = new ChatData
        {
            User = UserInput,
            UserTimestamp = DateTime.UtcNow
        };
        ChatHistory.Add(chatEntry);

        var tempUserInput = UserInput;
        UserInput = "";
        StateHasChanged();

        var result = await CustomHttpClient.Post<MessageResponse>($"/sessions/{sessionId}/messages", new MessageRequest(tempUserInput));

        chatEntry.Assistant = result.AssistantMessage;
        chatEntry.AssistantTimestamp = DateTime.UtcNow;

        IsLoading = false;
        StateHasChanged();

        ScrollToBottom();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !IsLoading)
        {
            await SendMessage();
        }
    }

    // ---------------------- UI HELPERS ----------------------

    private async void ScrollToBottom() => await JsRuntime.InvokeVoidAsync("scrollToBottom");
}