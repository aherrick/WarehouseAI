@page "/{SessionId?}"

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject CustomHttpClient CustomHttpClient

<div class="container mt-3">
    <div class="sticky-query p-3">
        <div class="d-flex">
            <button class="btn btn-primary me-2" @onclick="CreateNewSession">New Session</button>

            <select class="form-select w-auto me-2" @onchange="HandleSessionChange">
                <option value="" selected="@(string.IsNullOrEmpty(SessionId))">Select Session</option>
                @foreach (var id in SessionIds)
                {
                    <option value="@id" selected="@(id == SessionId)">@id</option>
                }
            </select>

            @if (!string.IsNullOrEmpty(SessionId))
            {
                <button class="btn btn-danger" @onclick="ConfirmAndDeleteSession">Delete Session</button>
            }
        </div>

        @if (!string.IsNullOrEmpty(SessionId))
        {
            <div class="input-group mt-2">
                <input class="form-control" @bind="UserInput" @bind:event="oninput" @onkeyup="HandleKeyPress" placeholder="Enter your query..." />
                <button class="btn btn-primary" @onclick="SendMessage" disabled="@IsLoading">
                    Send
                </button>
                @if (IsLoading)
                {
                    <div class="spinner-border text-primary ms-2" role="status" style="width: 1.5rem; height: 1.5rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>
        }
    </div>

    <div class="chat-history mt-3" id="chatHistory">
        @if (!string.IsNullOrEmpty(SessionId))
        {
            @foreach (var entry in ChatHistory)
            {
                <div class="mb-3">
                    <div class="text-end me-3">
                        <div class="badge bg-secondary">User</div>
                        <pre class="alert alert-primary d-inline-block p-2">@entry.User</pre>
                        <br />
                        <small class="d-block text-end">@entry.UserTimestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</small>
                    </div>

                    @if (!string.IsNullOrEmpty(entry.Assistant))
                    {
                        <div>
                            <div class="badge bg-success">Assistant</div>
                            <pre class="alert alert-light border d-inline-block p-2">@entry.Assistant</pre>
                            <br />
                            <small class="d-block">@entry.AssistantTimestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</small>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public string SessionId { get; set; }

    private List<string> SessionIds = new();
    private bool IsLoading = false;
    private string UserInput = "";
    private List<ChatData> ChatHistory = new();

    // GROUP 1: Lifecycle and Initialization Methods
    // These methods handle component initialization and rendering lifecycle events
    protected override async Task OnInitializedAsync()
    {
        await LoadSessionIds();
        if (!string.IsNullOrEmpty(SessionId))
        {
            await LoadSessionById(SessionId);
        }
    }

    protected override void OnAfterRender(bool firstRender) => ScrollToBottom();

    // GROUP 2: Session Management Methods
    // These methods handle session creation, deletion, loading, and navigation
    private async Task HandleSessionChange(ChangeEventArgs e)
    {
        var newSessionId = e.Value.ToString();
        if (string.IsNullOrEmpty(newSessionId))
        {
            ResetSessionState();
        }
        else
        {
            await LoadSessionById(newSessionId);
            NavigationManager.NavigateTo($"/{newSessionId}");
        }
    }

    private async Task LoadSessionIds()
    {
        SessionIds = (await CustomHttpClient.Get<SessionIdsResponse>("/sessions")).SessionIds;
    }

    private async Task LoadSessionById(string sessionId)
    {
        ChatHistory = (await CustomHttpClient.Get<ChatHistoryResponse>($"/sessions/{sessionId}/history")).History;
    }

    private async Task CreateNewSession()
    {
        var sessionIdResponse = await CustomHttpClient.Post<SessionIdResponse>("/sessions");
        SessionIds.Add(sessionIdResponse.SessionId);
        await LoadSessionById(sessionIdResponse.SessionId);
        NavigationManager.NavigateTo($"/{sessionIdResponse.SessionId}");
    }

    private async Task ConfirmAndDeleteSession()
    {
        if (!string.IsNullOrEmpty(SessionId))
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this session?");
            if (confirmed)
            {
                await CustomHttpClient.Post<object>($"/sessions/{SessionId}");
                SessionIds.Remove(SessionId);
                ResetSessionState();
            }
        }
    }

    private void ResetSessionState()
    {
        SessionId = null;
        ChatHistory.Clear();
        UserInput = "";
        NavigationManager.NavigateTo("/");
    }

    // GROUP 3: Message Handling Methods
    // These methods manage chat input, message sending, and keyboard events
    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserInput) || string.IsNullOrEmpty(SessionId))
        {
            return;
        }

        IsLoading = true;

        var chatEntry = new ChatData
        {
            User = UserInput,
            UserTimestamp = DateTime.UtcNow
        };
        ChatHistory.Add(chatEntry);

        var tempUserInput = UserInput;
        UserInput = "";
        StateHasChanged();

        var result = await CustomHttpClient.Post<MessageResponse>($"/sessions/{SessionId}/messages", new MessageRequest(tempUserInput));

        chatEntry.Assistant = result.AssistantMessage;
        chatEntry.AssistantTimestamp = DateTime.UtcNow;

        IsLoading = false;
        StateHasChanged();

        ScrollToBottom();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !IsLoading)
        {
            await SendMessage();
        }
    }

    // GROUP 4: UI Helper Methods
    // These methods assist with UI functionality like scrolling
    private async void ScrollToBottom() => await JsRuntime.InvokeVoidAsync("scrollToBottom");
}